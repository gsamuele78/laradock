networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
      #docker-in-docker:
      #driver: ${VOLUMES_DRIVER}
  react:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
    workspace:
      restart: always
      build:
        context: ./workspace
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - SHELL_OH_MY_ZSH=${SHELL_OH_MY_ZSH}
          - SHELL_OH_MY_ZSH_AUTOSUGESTIONS=${SHELL_OH_MY_ZSH_AUTOSUGESTIONS}
          - SHELL_OH_MY_ZSH_ALIASES=${SHELL_OH_MY_ZSH_ALIASES}
          - BASE_IMAGE_TAG_PREFIX=${WORKSPACE_BASE_IMAGE_TAG_PREFIX}
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
          - INSTALL_SUBVERSION=${WORKSPACE_INSTALL_SUBVERSION}
          - INSTALL_BZ2=${WORKSPACE_INSTALL_BZ2}
          - INSTALL_GMP=${WORKSPACE_INSTALL_GMP}
          - INSTALL_GNUPG=${WORKSPACE_INSTALL_GNUPG}
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          - XDEBUG_PORT=${WORKSPACE_XDEBUG_PORT}
          - INSTALL_PCOV=${WORKSPACE_INSTALL_PCOV}
          - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
            #- INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SSH2=${WORKSPACE_INSTALL_SSH2}
          - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
          - INSTALL_XSL=${WORKSPACE_INSTALL_XSL}
          - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
          - INSTALL_SMB=${WORKSPACE_INSTALL_SMB}
          - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
          - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
          - INSTALL_AMQP=${WORKSPACE_INSTALL_AMQP}
          - INSTALL_CASSANDRA=${WORKSPACE_INSTALL_CASSANDRA}
          - INSTALL_ZMQ=${WORKSPACE_INSTALL_ZMQ}
          - INSTALL_GEARMAN=${WORKSPACE_INSTALL_GEARMAN}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
          - NVM_NODEJS_ORG_MIRROR=${WORKSPACE_NVM_NODEJS_ORG_MIRROR}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NPM_REGISTRY=${WORKSPACE_NPM_REGISTRY}
          - NPM_FETCH_RETRIES=${WORKSPACE_NPM_FETCH_RETRIES}
          - NPM_FETCH_RETRY_FACTOR=${WORKSPACE_NPM_FETCH_RETRY_FACTOR}
          - NPM_FETCH_RETRY_MINTIMEOUT=${WORKSPACE_NPM_FETCH_RETRY_MINTIMEOUT}
          - NPM_FETCH_RETRY_MAXTIMEOUT=${WORKSPACE_NPM_FETCH_RETRY_MAXTIMEOUT}
          - INSTALL_PNPM=${WORKSPACE_INSTALL_PNPM}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_NPM_GULP=${WORKSPACE_INSTALL_NPM_GULP}
          - INSTALL_NPM_BOWER=${WORKSPACE_INSTALL_NPM_BOWER}
          - INSTALL_NPM_VUE_CLI=${WORKSPACE_INSTALL_NPM_VUE_CLI}
          - INSTALL_NPM_ANGULAR_CLI=${WORKSPACE_INSTALL_NPM_ANGULAR_CLI}
          - INSTALL_NPM_CHECK_UPDATES_CLI=${WORKSPACE_INSTALL_NPM_CHECK_UPDATES_CLI}
          - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
          - INSTALL_WP_CLI=${WORKSPACE_INSTALL_WP_CLI}
          - INSTALL_DRUPAL_CONSOLE=${WORKSPACE_INSTALL_DRUPAL_CONSOLE}
          - INSTALL_AEROSPIKE=${WORKSPACE_INSTALL_AEROSPIKE}
          - INSTALL_OCI8=${WORKSPACE_INSTALL_OCI8}
          - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - COMPOSER_VERSION=${WORKSPACE_COMPOSER_VERSION}
          - COMPOSER_AUTH_JSON=${WORKSPACE_COMPOSER_AUTH_JSON}
          - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
          - INSTALL_XLSWRITER=${WORKSPACE_INSTALL_XLSWRITER}
          - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
          - INSTALL_PRESTISSIMO=${WORKSPACE_INSTALL_PRESTISSIMO}
          - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
          - INSTALL_MC=${WORKSPACE_INSTALL_MC}
          - INSTALL_SYMFONY=${WORKSPACE_INSTALL_SYMFONY}
          - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
          - INSTALL_PYTHON3=${WORKSPACE_INSTALL_PYTHON3}
          - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - INSTALL_TERRAFORM=${WORKSPACE_INSTALL_TERRAFORM}
          - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
          - INSTALL_PG_CLIENT=${WORKSPACE_INSTALL_PG_CLIENT}
          - PG_CLIENT_VERSION=${POSTGRES_CLIENT_VERSION}
          - INSTALL_PHALCON=${WORKSPACE_INSTALL_PHALCON}
          - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
          - INSTALL_TAINT=${WORKSPACE_INSTALL_TAINT}
          - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
          - INSTALL_GRAPHVIZ=${WORKSPACE_INSTALL_GRAPHVIZ}
          - INSTALL_IONCUBE=${WORKSPACE_INSTALL_IONCUBE}
          - INSTALL_APCU=${WORKSPACE_INSTALL_APCU}
          - INSTALL_MYSQL_CLIENT=${WORKSPACE_INSTALL_MYSQL_CLIENT}
          - INSTALL_PING=${WORKSPACE_INSTALL_PING}
          - INSTALL_SSHPASS=${WORKSPACE_INSTALL_SSHPASS}
          - INSTALL_INOTIFY=${WORKSPACE_INSTALL_INOTIFY}
          - INSTALL_FSWATCH=${WORKSPACE_INSTALL_FSWATCH}
          - INSTALL_AST=${WORKSPACE_INSTALL_AST}
          - INSTALL_YAML=${WORKSPACE_INSTALL_YAML}
          - INSTALL_RDKAFKA=${WORKSPACE_INSTALL_RDKAFKA}
          - INSTALL_MAILPARSE=${WORKSPACE_INSTALL_MAILPARSE}
          - INSTALL_GIT_PROMPT=${WORKSPACE_INSTALL_GIT_PROMPT}
          - INSTALL_XMLRPC=${WORKSPACE_INSTALL_XMLRPC}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - DRUSH_VERSION=${WORKSPACE_DRUSH_VERSION}
          - AST_VERSION=${WORKSPACE_AST_VERSION}
          - IMAGEMAGICK_VERSION=${WORKSPACE_IMAGEMAGICK_VERSION}
          - TZ=${WORKSPACE_TIMEZONE}
            #- BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
            #- BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
          - INSTALL_POWERLINE=${WORKSPACE_INSTALL_POWERLINE}
          - INSTALL_SUPERVISOR=${WORKSPACE_INSTALL_SUPERVISOR}
          - INSTALL_FFMPEG=${WORKSPACE_INSTALL_FFMPEG}
          - INSTALL_AUDIOWAVEFORM=${WORKSPACE_INSTALL_AUDIOWAVEFORM}
          - INSTALL_WKHTMLTOPDF=${WORKSPACE_INSTALL_WKHTMLTOPDF}
          - WKHTMLTOPDF_VERSION=${WORKSPACE_WKHTMLTOPDF_VERSION}
          - INSTALL_GNU_PARALLEL=${WORKSPACE_INSTALL_GNU_PARALLEL}
          - INSTALL_LNAV=${WORKSPACE_INSTALL_LNAV}
          - INSTALL_PROTOC=${WORKSPACE_INSTALL_PROTOC}
          - INSTALL_PHPDECIMAL=${WORKSPACE_INSTALL_PHPDECIMAL}
          - INSTALL_ZOOKEEPER=${WORKSPACE_INSTALL_ZOOKEEPER}
          - INSTALL_SSDB=${WORKSPACE_INSTALL_SSDB}
          - INSTALL_TRADER=${WORKSPACE_INSTALL_TRADER}
          - PROTOC_VERSION=${WORKSPACE_PROTOC_VERSION}
          - INSTALL_DOCKER_CLIENT=${WORKSPACE_INSTALL_DOCKER_CLIENT}
          - INSTALL_MEMCACHED=${WORKSPACE_INSTALL_MEMCACHED}
          - INSTALL_EVENT=${WORKSPACE_INSTALL_EVENT}
          - INSTALL_DNSUTILS=${WORKSPACE_INSTALL_DNSUTILS}
          - INSTALL_POPPLER_UTILS=${WORKSPACE_INSTALL_POPPLER_UTILS}
          - INSTALL_JDK=${WORKSPACE_INSTALL_JDK}
          - INSTALL_GITHUB_CLI=${WORKSPACE_INSTALL_GITHUB_CLI}
            #- ORACLE_INSTANT_CLIENT_MIRROR=${ORACLE_INSTANT_CLIENT_MIRROR}
            #- ORACLE_INSTANT_CLIENT_ARCH=${ORACLE_INSTANT_CLIENT_ARCH}
            #- ORACLE_INSTANT_CLIENT_MAJOR=${ORACLE_INSTANT_CLIENT_MAJOR}
            #- ORACLE_INSTANT_CLIENT_MINOR=${ORACLE_INSTANT_CLIENT_MINOR}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
          #- docker-in-docker:/certs/client
        - ./php-worker/supervisord.d:/etc/supervisord.d
          #extra_hosts:
          #- "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
        - "${WORKSPACE_BROWSERSYNC_HOST_PORT}:3000"
        - "${WORKSPACE_BROWSERSYNC_UI_HOST_PORT}:3001"
        - "${WORKSPACE_VUE_CLI_SERVE_HOST_PORT}:8080"
        - "${WORKSPACE_VUE_CLI_UI_HOST_PORT}:8000"
        - "${WORKSPACE_ANGULAR_CLI_SERVE_HOST_PORT}:4200"
        - "${WORKSPACE_VITE_PORT}:5173"
      tty: true
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
          #- DOCKER_HOST=tcp://docker-in-docker:2376
          #- DOCKER_TLS_VERIFY=1
          #- DOCKER_TLS_CERTDIR=/certs
          #- DOCKER_CERT_PATH=/certs/client
        - CHOKIDAR_USEPOLLING=true
      networks:
        - frontend
        - backend
          #links:
          #- docker-in-docker

### PHP-FPM ##############################################
    php-fpm:
      restart: always
      build:
        context: ./php-fpm
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - BASE_IMAGE_TAG_PREFIX=${PHP_FPM_BASE_IMAGE_TAG_PREFIX}
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
          - INSTALL_BZ2=${PHP_FPM_INSTALL_BZ2}
          - INSTALL_ENCHANT=${PHP_FPM_INSTALL_ENCHANT}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_GNUPG=${PHP_FPM_INSTALL_GNUPG}
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - XDEBUG_PORT=${PHP_FPM_XDEBUG_PORT}
          - INSTALL_PCOV=${PHP_FPM_INSTALL_PCOV}
          - INSTALL_PHPDBG=${PHP_FPM_INSTALL_PHPDBG}
            #- INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SSH2=${PHP_FPM_INSTALL_SSH2}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_XSL=${PHP_FPM_INSTALL_XSL}
          - INSTALL_SMB=${PHP_FPM_INSTALL_SMB}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_CASSANDRA=${PHP_FPM_INSTALL_CASSANDRA}
          - INSTALL_ZMQ=${PHP_FPM_INSTALL_ZMQ}
          - INSTALL_GEARMAN=${PHP_FPM_INSTALL_GEARMAN}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_AEROSPIKE=${PHP_FPM_INSTALL_AEROSPIKE}
          - INSTALL_OCI8=${PHP_FPM_INSTALL_OCI8}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - PG_CLIENT_VERSION=${POSTGRES_CLIENT_VERSION}
          - INSTALL_POSTGIS=${PHP_FPM_INSTALL_POSTGIS}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_PHALCON=${PHP_FPM_INSTALL_PHALCON}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_TAINT=${PHP_FPM_INSTALL_TAINT}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
          - INSTALL_XLSWRITER=${PHP_FPM_INSTALL_XLSWRITER}
          - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
          - INSTALL_IONCUBE=${PHP_FPM_INSTALL_IONCUBE}
          - INSTALL_APCU=${PHP_FPM_INSTALL_APCU}
          - INSTALL_CACHETOOL=${PHP_FPM_INSTALL_CACHETOOL}
          - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
          - INSTALL_RDKAFKA=${PHP_FPM_INSTALL_RDKAFKA}
          - INSTALL_GETTEXT=${PHP_FPM_INSTALL_GETTEXT}
          - INSTALL_ADDITIONAL_LOCALES=${PHP_FPM_INSTALL_ADDITIONAL_LOCALES}
          - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
          - INSTALL_PING=${PHP_FPM_INSTALL_PING}
          - INSTALL_SSHPASS=${PHP_FPM_INSTALL_SSHPASS}
          - INSTALL_MAILPARSE=${PHP_FPM_INSTALL_MAILPARSE}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
          - ADDITIONAL_LOCALES=${PHP_FPM_ADDITIONAL_LOCALES}
          - INSTALL_FFMPEG=${PHP_FPM_FFMPEG}
          - INSTALL_AUDIOWAVEFORM=${PHP_FPM_AUDIOWAVEFORM}
          - INSTALL_WKHTMLTOPDF=${PHP_FPM_INSTALL_WKHTMLTOPDF}
          - WKHTMLTOPDF_VERSION=${PHP_FPM_WKHTMLTOPDF_VERSION}
          - INSTALL_XHPROF=${PHP_FPM_INSTALL_XHPROF}
          - INSTALL_XMLRPC=${PHP_FPM_INSTALL_XMLRPC}
          - INSTALL_PHPDECIMAL=${PHP_FPM_INSTALL_PHPDECIMAL}
          - INSTALL_ZOOKEEPER=${PHP_FPM_INSTALL_ZOOKEEPER}
          - INSTALL_SSDB=${PHP_FPM_INSTALL_SSDB}
          - INSTALL_TRADER=${PHP_FPM_INSTALL_TRADER}
          - INSTALL_EVENT=${PHP_FPM_INSTALL_EVENT}
          - LEGACY_OPENSSL=${PHP_LEGACY_OPENSSL}
          - DOWNGRADE_OPENSSL_TLS_AND_SECLEVEL=${PHP_DOWNGRADE_OPENSSL_TLS_AND_SECLEVEL}
          - DOWNGRADE_OPENSSL_TLS_VERSION=${PHP_DOWNGRADE_OPENSSL_TLS_VERSION}
          - PUID=${PHP_FPM_PUID}
          - PGID=${PHP_FPM_PGID}
          - IMAGEMAGICK_VERSION=${PHP_FPM_IMAGEMAGICK_VERSION}
          - LOCALE=${PHP_FPM_DEFAULT_LOCALE}
          - NEW_RELIC=${PHP_FPM_NEW_RELIC}
          - NEW_RELIC_KEY=${PHP_FPM_NEW_RELIC_KEY}
          - NEW_RELIC_APP_NAME=${PHP_FPM_NEW_RELIC_APP_NAME}
          - INSTALL_DOCKER_CLIENT=${PHP_FPM_INSTALL_DOCKER_CLIENT}
          - INSTALL_DNSUTILS=${PHP_FPM_INSTALL_DNSUTILS}
          - INSTALL_POPPLER_UTILS=${PHP_FPM_INSTALL_POPPLER_UTILS}
            #- ORACLE_INSTANT_CLIENT_MIRROR=${ORACLE_INSTANT_CLIENT_MIRROR}
            #- ORACLE_INSTANT_CLIENT_ARCH=${ORACLE_INSTANT_CLIENT_ARCH}
            #- ORACLE_INSTANT_CLIENT_MAJOR=${ORACLE_INSTANT_CLIENT_MAJOR}
            #- ORACLE_INSTANT_CLIENT_MINOR=${ORACLE_INSTANT_CLIENT_MINOR}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
          #- docker-in-docker:/certs/client
      expose:
        - "9000"
          #extra_hosts:
          #- "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
          #- DOCKER_HOST=tcp://docker-in-docker:2376
          #- DOCKER_TLS_VERIFY=1
          #- DOCKER_TLS_CERTDIR=/certs
          #- DOCKER_CERT_PATH=/certs/client
        - FAKETIME=${PHP_FPM_FAKETIME}
        - TZ=${WORKSPACE_TIMEZONE}

      depends_on:
        - workspace
      networks:
        - backend
          #links:
          #- docker-in-docker

### NGINX Server #########################################
    nginx:
      restart: always
      build:
        context: ./nginx
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
          #- "${VARNISH_BACKEND_PORT}:81"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend
          #extra_hosts:
          #- "host.docker.internal:host-gateway"  

### MySQL ################################################
    mysql:
      restart: always
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### MariaDB ##############################################
    mariadb:
      restart: always
      build:
        context: ./mariadb
        args:
          - http_proxy
          - https_proxy
          - no_proxy
          - MARIADB_VERSION=${MARIADB_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
        - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MARIADB_PORT}:3306"
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
        - MYSQL_DATABASE=${MARIADB_DATABASE}
        - MYSQL_USER=${MARIADB_USER}
        - MYSQL_PASSWORD=${MARIADB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      networks:
        - backend

### PostgreSQL ###########################################
    postgres:
      restart: always
      build:
        context: ./postgres
        args:
          - POSTGRES_VERSION=${POSTGRES_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          #- GITLAB_POSTGRES_INIT=${GITLAB_POSTGRES_INIT}
          #- GITLAB_POSTGRES_USER=${GITLAB_POSTGRES_USER}
          #- GITLAB_POSTGRES_PASSWORD=${GITLAB_POSTGRES_PASSWORD}
          #- GITLAB_POSTGRES_DB=${GITLAB_POSTGRES_DB}
        - KEYCLOAK_POSTGRES_INIT=${KEYCLOAK_POSTGRES_INIT}
        - KEYCLOAK_POSTGRES_USER=${KEYCLOAK_POSTGRES_USER}
        - KEYCLOAK_POSTGRES_PASSWORD=${KEYCLOAK_POSTGRES_PASSWORD}
        - KEYCLOAK_POSTGRES_DB=${KEYCLOAK_POSTGRES_DB}
          #- JUPYTERHUB_POSTGRES_INIT=${JUPYTERHUB_POSTGRES_INIT}
          #- JUPYTERHUB_POSTGRES_USER=${JUPYTERHUB_POSTGRES_USER}
          #- JUPYTERHUB_POSTGRES_PASSWORD=${JUPYTERHUB_POSTGRES_PASSWORD}
          #- JUPYTERHUB_POSTGRES_DB=${JUPYTERHUB_POSTGRES_DB}
          #- SONARQUBE_POSTGRES_INIT=${SONARQUBE_POSTGRES_INIT}
          #- SONARQUBE_POSTGRES_DB=${SONARQUBE_POSTGRES_DB}
          #- SONARQUBE_POSTGRES_USER=${SONARQUBE_POSTGRES_USER}
          #- SONARQUBE_POSTGRES_PASSWORD=${SONARQUBE_POSTGRES_PASSWORD}
          #- POSTGRES_CONFLUENCE_INIT=${CONFLUENCE_POSTGRES_INIT}
          #- POSTGRES_CONFLUENCE_DB=${CONFLUENCE_POSTGRES_DB}
          #- POSTGRES_CONFLUENCE_USER=${CONFLUENCE_POSTGRES_USER}
          #- POSTGRES_CONFLUENCE_PASSWORD=${CONFLUENCE_POSTGRES_PASSWORD}
      networks:
        - backend
### pgbackups PostgreSQL ###########################################
    pgbackups:
      image: prodrigestivill/postgres-backup-local
      restart: always
      volumes:
        - ../backup:/backups
      links:
        - postgres
      environment:
        - POSTGRES_HOST={POSTGRES_HOST}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend


### PostgreSQL PostGis ###################################
    postgres-postgis:
      restart: always
      build:
        context: ./postgres-postgis
        args:
          - POSTGIS_VERSION=${POSTGIS_VERSION}
          - INSTALL_PGSQL_HTTP_FOR_POSTGIS13=${POSTGIS_INSTALL_PGSQL_HTTP_FOR_POSTGIS13}
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

  ### Redis ################################################
    redis:
      restart: always
      build: ./redis
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
      command: --requirepass ${REDIS_PASSWORD}
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

### Redis Cluster ##########################################
    redis-cluster:
      restart: always
      build: ./redis-cluster
      ports:
        - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
      networks:
        - backend
### Memcached ############################################
    memcached:
      restart: always
      build: ./memcached
      volumes:
        - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
      ports:
        - "${MEMCACHED_HOST_PORT}:11211"
      depends_on:
        - php-fpm
      networks:
        - backend

### Certbot #########################################
    certbot:
      build:
        context: ./certbot
      volumes:
        - ./data/certbot/certs/:/var/certs
        - ./certbot/letsencrypt/:/var/www/letsencrypt
      environment:
        - CN="fake.domain.com"
        - EMAIL="fake.email@gmail.com"
      networks:
        - frontend

### MailCatcher ################################################
    mailcatcher:
      restart: always
      build: ./mailcatcher
      ports:
        - "1025:1025"
        - "1080:1080"
      networks:
        - frontend
        - backend

### Mailhog ################################################
    mailhog:
      restart: always
      build: ./mailhog
      ports:
        - "1025:1025"
        - "8025:8025"
      networks:
        - frontend
        - backend

### MailDev ##############################################
    maildev:
      restart: always
      build: ./maildev
      ports:
        - "${MAILDEV_HTTP_PORT}:80"
        - "${MAILDEV_SMTP_PORT}:25"
      networks:
        - frontend
        - backend

### Mailpit ##############################################
    mailpit:
      restart: always
      build: ./mailpit
      ports:
        - "${MAILPIT_HTTP_PORT}:8025"
        - "${MAILPIT_SMTP_PORT}:1025"
      networks:
        - frontend
        - backend

### HAProxy ####################################
    haproxy:
      restart: always
      build: ./haproxy
      ports:
        - "${HAPROXY_HOST_HTTP_PORT}:8085"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
          #links:
          #- proxy
          #- proxy2

### Laravel Echo Server #######################################
    laravel-echo-server:
      restart: always
      build:
        context: ./laravel-echo-server
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
      volumes:
        - ./laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
      ports:
        - "${LARAVEL_ECHO_SERVER_PORT}:6001"
      links:
        - redis
      networks:
        - frontend
        - backend

### Thumbor #########################################
    thumbor:
      restart: always
      build: ./thumbor
      volumes:
        #- ${DATA_PATH_HOST}/thumbor/data:/data
        #- /opt/docker/storage:/data
        #- /mnt/nfs/erbari/thumbor/data:/data
        - ${THUMBOR_PATH_HOST}:/data
        #- ${DATA_PATH_HOST}/thumbor/data:/logs
        #- ./logs/thumbor/:/logs
        - ${THUMBOR_HOST_LOG_PATH}:/logs
      ports:
        - "127.0.0.1:${THUMBOR_PORT}:8000"
      environment:
        #- VIRTUAL_HOST=localhost
        #- THUMBOR_HOST=127.0.0.1 
        #- THUMBOR_NUM_PROCESSES=4
        - THUMBOR_LOG_FORMAT=${THUMBOR_LOG_FORMAT}
        - THUMBOR_LOG_DATE_FORMAT=${THUMBOR_LOG_DATE_FORMAT}
        - MAX_WIDTH=${MAX_WIDTH}
        - MAX_HEIGHT=${MAX_HEIGHT}
        - MIN_WIDTH=${MIN_WIDTH}
        - MIN_HEIGHT=${MIN_HEIGHT}
        - ALLOWED_SOURCES=${ALLOWED_SOURCES}
        - QUALITY=${QUALITY}
        - WEBP_QUALITY=${WEBP_QUALITY}
        - PNG_COMPRESSION_LEVEL=${PNG_COMPRESSION_LEVEL}
        - AUTO_WEBP=${AUTO_WEBP}
        - MAX_AGE=${MAX_AGE}
        - MAX_AGE_TEMP_IMAGE=${MAX_AGE_TEMP_IMAGE}
        - RESPECT_ORIENTATION=${RESPECT_ORIENTATION}
        - IGNORE_SMART_ERRORS=${IGNORE_SMART_ERRORS}
        - PRESERVE_EXIF_INFO=${PRESERVE_EXIF_INFO}
        - ALLOW_ANIMATED_GIFS=${ALLOW_ANIMATED_GIFS}
        - USE_GIFSICLE_ENGINE=${USE_GIFSICLE_ENGINE}
        - USE_BLACKLIST=${USE_BLACKLIST}
        - LOADER=${LOADER}
        - STORAGE=${STORAGE}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - RESULT_STORAGE=${RESULT_STORAGE}
        - ENGINE=${ENGINE}
        - SECURITY_KEY=${SECURITY_KEY}
        - ALLOW_UNSAFE_URL=${ALLOW_UNSAFE_URL}
        - ALLOW_OLD_URLS=${ALLOW_OLD_URLS}
        - FILE_LOADER_ROOT_PATH=${FILE_LOADER_ROOT_PATH}
        - HTTP_LOADER_CONNECT_TIMEOUT=${HTTP_LOADER_CONNECT_TIMEOUT}
        - HTTP_LOADER_REQUEST_TIMEOUT=${HTTP_LOADER_REQUEST_TIMEOUT}
        - HTTP_LOADER_FOLLOW_REDIRECTS=${HTTP_LOADER_FOLLOW_REDIRECTS}
        - HTTP_LOADER_MAX_REDIRECTS=${HTTP_LOADER_MAX_REDIRECTS}
        - HTTP_LOADER_FORWARD_USER_AGENT=${HTTP_LOADER_FORWARD_USER_AGENT}
        - HTTP_LOADER_DEFAULT_USER_AGENT=${HTTP_LOADER_DEFAULT_USER_AGENT}
        - HTTP_LOADER_PROXY_HOST=${HTTP_LOADER_PROXY_HOST}
        - HTTP_LOADER_PROXY_PORT=${HTTP_LOADER_PROXY_PORT}
        - HTTP_LOADER_PROXY_USERNAME=${HTTP_LOADER_PROXY_USERNAME}
        - HTTP_LOADER_PROXY_PASSWORD=${HTTP_LOADER_PROXY_PASSWORD}
        - HTTP_LOADER_CA_CERTS=${HTTP_LOADER_CA_CERTS}
        - HTTP_LOADER_VALIDATE_CERTS=${HTTP_LOADER_VALIDATE_CERTS}
        - HTTP_LOADER_CLIENT_KEY=${HTTP_LOADER_CLIENT_KEY}
        - HTTP_LOADER_CLIENT_CERT=${HTTP_LOADER_CLIENT_CERT}
        - HTTP_LOADER_CURL_ASYNC_HTTP_CLIENT=${HTTP_LOADER_CURL_ASYNC_HTTP_CLIENT}
        - STORAGE_EXPIRATION_SECONDS=${STORAGE_EXPIRATION_SECONDS}
        - STORES_CRYPTO_KEY_FOR_EACH_IMAGE=${STORES_CRYPTO_KEY_FOR_EACH_IMAGE}
        - FILE_STORAGE_ROOT_PATH=${FILE_STORAGE_ROOT_PATH}
        - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE}
        - UPLOAD_ENABLED=${UPLOAD_ENABLED}
        - UPLOAD_PHOTO_STORAGE=${UPLOAD_PHOTO_STORAGE}
        - UPLOAD_DELETE_ALLOWED=${UPLOAD_DELETE_ALLOWED}
        - UPLOAD_PUT_ALLOWED=${UPLOAD_PUT_ALLOWED}
        - UPLOAD_DEFAULT_FILENAME=${UPLOAD_DEFAULT_FILENAME}
        - MONGO_STORAGE_SERVER_HOST=${MONGO_STORAGE_SERVER_HOST}
        - MONGO_STORAGE_SERVER_PORT=${MONGO_STORAGE_SERVER_PORT}
        - MONGO_STORAGE_SERVER_DB=${MONGO_STORAGE_SERVER_DB}
        - MONGO_STORAGE_SERVER_COLLECTION=${MONGO_STORAGE_SERVER_COLLECTION}
        - REDIS_STORAGE_SERVER_HOST=${REDIS_STORAGE_SERVER_HOST}
        - REDIS_STORAGE_SERVER_PORT=${REDIS_STORAGE_SERVER_PORT}
        - REDIS_STORAGE_SERVER_DB=${REDIS_STORAGE_SERVER_DB}
        - REDIS_STORAGE_SERVER_PASSWORD=${REDIS_STORAGE_SERVER_PASSWORD}
        - REDIS_RESULT_STORAGE_SERVER_HOST=${REDIS_RESULT_STORAGE_SERVER_HOST}
        - REDIS_RESULT_STORAGE_SERVER_PORT=${REDIS_RESULT_STORAGE_SERVER_PORT}
        - REDIS_RESULT_STORAGE_SERVER_DB=${REDIS_RESULT_STORAGE_SERVER_DB}
        - REDIS_RESULT_STORAGE_SERVER_PASSWORD=${REDIS_RESULT_STORAGE_SERVER_PASSWORD}
        - MEMCACHE_STORAGE_SERVERS=${MEMCACHE_STORAGE_SERVERS}
        - MIXED_STORAGE_FILE_STORAGE=${MIXED_STORAGE_FILE_STORAGE}
        - MIXED_STORAGE_CRYPTO_STORAGE=${MIXED_STORAGE_CRYPTO_STORAGE}
        - MIXED_STORAGE_DETECTOR_STORAGE=${MIXED_STORAGE_DETECTOR_STORAGE}
        - META_CALLBACK_NAME=${META_CALLBACK_NAME}
        - DETECTORS=${DETECTORS}
        - FACE_DETECTOR_CASCADE_FILE=${FACE_DETECTOR_CASCADE_FILE}
        - OPTIMIZERS=${OPTIMIZERS}
        - JPEGTRAN_PATH=${JPEGTRAN_PATH}
        - PROGRESSIVE_JPEG=${PROGRESSIVE_JPEG}
        - RESULT_STORAGE_EXPIRATION_SECONDS=${RESULT_STORAGE_EXPIRATION_SECONDS}
        - RESULT_STORAGE_FILE_STORAGE_ROOT_PATH=${RESULT_STORAGE_FILE_STORAGE_ROOT_PATH}
        - RESULT_STORAGE_STORES_UNSAFE=${RESULT_STORAGE_STORES_UNSAFE}
        - REDIS_QUEUE_SERVER_HOST=${REDIS_QUEUE_SERVER_HOST}
        - REDIS_QUEUE_SERVER_PORT=${REDIS_QUEUE_SERVER_PORT}
        - REDIS_QUEUE_SERVER_DB=${REDIS_QUEUE_SERVER_DB}
        - REDIS_QUEUE_SERVER_PASSWORD=${REDIS_QUEUE_SERVER_PASSWORD}
        - SQS_QUEUE_KEY_ID=${SQS_QUEUE_KEY_ID}
        - SQS_QUEUE_KEY_SECRET=${SQS_QUEUE_KEY_SECRET}
        - SQS_QUEUE_REGION=${SQS_QUEUE_REGION}
        - USE_CUSTOM_ERROR_HANDLING=${USE_CUSTOM_ERROR_HANDLING}
        - ERROR_HANDLER_MODULE=${ERROR_HANDLER_MODULE}
        - ERROR_FILE_LOGGER=${ERROR_FILE_LOGGER}
        - ERROR_FILE_NAME_USE_CONTEXT=${ERROR_FILE_NAME_USE_CONTEXT}
        - SENTRY_DSN_URL=${SENTRY_DSN_URL}
        - TC_AWS_REGION=${TC_AWS_REGION}
        - TC_AWS_ENDPOINT=${TC_AWS_ENDPOINT}
        - TC_AWS_STORAGE_BUCKET=${TC_AWS_STORAGE_BUCKET}
        - TC_AWS_STORAGE_ROOT_PATH=${TC_AWS_STORAGE_ROOT_PATH}
        - TC_AWS_LOADER_BUCKET=${TC_AWS_LOADER_BUCKET}
        - TC_AWS_LOADER_ROOT_PATH=${TC_AWS_LOADER_ROOT_PATH}
        - TC_AWS_RESULT_STORAGE_BUCKET=${TC_AWS_RESULT_STORAGE_BUCKET}
        - TC_AWS_RESULT_STORAGE_ROOT_PATH=${TC_AWS_RESULT_STORAGE_ROOT_PATH}
        - TC_AWS_STORAGE_SSE=${TC_AWS_STORAGE_SSE}
        - TC_AWS_STORAGE_RRS=${TC_AWS_STORAGE_RRS}
        - TC_AWS_ENABLE_HTTP_LOADER=${TC_AWS_ENABLE_HTTP_LOADER}
        - TC_AWS_ALLOWED_BUCKETS=${TC_AWS_ALLOWED_BUCKETS}
        - TC_AWS_STORE_METADATA=${TC_AWS_STORE_METADATA}
      networks:
        #- frontend
        - backend


### REDISWEBUI ################################################
    redis-webui:
      restart: always
      build:
        context: ./redis-webui
      environment:
        - ADMIN_USER=${REDIS_WEBUI_USERNAME}
        - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
        - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
        - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
        - REDIS_1_AUTH=${REDIS_PASSWORD}
      networks:
        - backend
      ports:
        - "${REDIS_WEBUI_PORT}:80"
      depends_on:
        - redis


### DOCKER-REGISTRY ################################################
    docker-registry:
      build:
        context: ./docker-registry
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${DATA_PATH_HOST}/docker-registry:/var/lib/registry
      ports:
        - "${DOCKER_REGISTRY_PORT}:5000"
      networks:
        - backend

### MAILU ################################################
    mailu:
      image: mailu/admin:${MAILU_VERSION}
      volumes:
        - "${DATA_PATH_HOST}/mailu/data:/data"
        - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
        - "${DATA_PATH_HOST}/mailu/webmail:/webmail"
        - /var/run/docker.sock:/var/run/docker.sock:ro
      depends_on:
        - mailu-front
        - mailu-imap
        - mailu-smtp
        - mailu-antispam
        - mailu-antivirus
        - mailu-webdav
        - mailu-admin
        - mailu-webmail
        - mailu-fetchmail
      command: ["sh", "-c", "echo ${MAILU_INIT_ADMIN_USERNAME}@${MAILU_DOMAIN} ${MAILU_INIT_ADMIN_PASSWORD} ;python manage.py advertise ; python manage.py db upgrade ; python manage.py admin ${MAILU_INIT_ADMIN_USERNAME} ${MAILU_DOMAIN} ${MAILU_INIT_ADMIN_PASSWORD} || true;sed -i -- \"s/= Off/= On/g\" /webmail/_data_/_default_/configs/config.ini || true;if grep -Fq \"registration_link_url\" /webmail/_data_/_default_/configs/config.ini;then echo Already set!;else echo \"\" >> /webmail/_data_/_default_/configs/config.ini; echo \"[login]\" >> /webmail/_data_/_default_/configs/config.ini;echo \"registration_link_url = '${MAILU_WEBSITE}${MAILU_WEB_ADMIN}/ui/user/signup'\" >> /webmail/_data_/_default_/configs/config.ini;fi"]
      networks:
        - backend
    mailu-front:
      image: mailu/nginx:${MAILU_VERSION}
      environment:
        - ADMIN=${MAILU_ADMIN}
        - WEB_ADMIN=${MAILU_WEB_ADMIN}
        - WEB_WEBMAIL=${MAILU_WEB_WEBMAIL}
        - WEBDAV=${MAILU_WEBDAV}
        - HOSTNAMES=${MAILU_HOSTNAMES}
        - TLS_FLAVOR=${MAILU_TLS_FLAVOR}
        - MESSAGE_SIZE_LIMIT=${MAILU_MESSAGE_SIZE_LIMIT}
      ports:
        - "${MAILU_HTTP_PORT}:80"
        - "${MAILU_HTTPS_PORT}:443"
        - "110:110"
        - "143:143"
        - "993:993"
        - "995:995"
        - "25:25"
        - "465:465"
        - "587:587"
      volumes:
        - "${DATA_PATH_HOST}/mailu/certs:/certs"
      networks:
        backend:
          aliases:
            - front
    mailu-imap:
      image: mailu/dovecot:${MAILU_VERSION}
      environment:
        - DOMAIN=${MAILU_DOMAIN}
        - HOSTNAMES=${MAILU_HOSTNAMES}
        - POSTMASTER=${MAILU_POSTMASTER}
        - WEBMAIL=${MAILU_WEBMAIL}
        - RECIPIENT_DELIMITER=${MAILU_RECIPIENT_DELIMITER}
      volumes:
        - "${DATA_PATH_HOST}/mailu/data:/data"
        - "${DATA_PATH_HOST}/mailu/mail:/mail"
        - "${DATA_PATH_HOST}/mailu/overrides:/overrides"
      depends_on:
        - mailu-front
      networks:
        backend:
          aliases:
            - imap
    mailu-smtp:
      image: mailu/postfix:${MAILU_VERSION}
      environment:
        - DOMAIN=${MAILU_DOMAIN}
        - HOSTNAMES=${MAILU_HOSTNAMES}
        - RELAYHOST=${MAILU_RELAYHOST}
        - RELAYNETS=${MAILU_RELAYNETS}
        - RECIPIENT_DELIMITER=${MAILU_RECIPIENT_DELIMITER}
        - MESSAGE_SIZE_LIMIT=${MAILU_MESSAGE_SIZE_LIMIT}
      volumes:
        - "${DATA_PATH_HOST}/mailu/data:/data"
        - "${DATA_PATH_HOST}/mailu/overrides:/overrides"
      depends_on:
        - mailu-front
      networks:
        backend:
          aliases:
            - smtp
    mailu-antispam:
      image: mailu/rspamd:${MAILU_VERSION}
      volumes:
        - "${DATA_PATH_HOST}/mailu/filter:/var/lib/rspamd"
        - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
        - "${DATA_PATH_HOST}/mailu/overrides/rspamd:/etc/rspamd/override.d"
      depends_on:
        - mailu-front
      networks:
        backend:
          aliases:
            - antispam
    mailu-antivirus:
      image: mailu/clamav:${MAILU_VERSION}
      volumes:
        - "${DATA_PATH_HOST}/mailu/filter:/data"
      networks:
        backend:
          aliases:
            - antivirus
    mailu-webdav:
      image: mailu/${MAILU_WEBDAV}:${MAILU_VERSION}
      volumes:
        - "${DATA_PATH_HOST}/mailu/dav:/data"
      networks:
        backend:
          aliases:
            - webdav
    mailu-admin:
      image: mailu/admin:${MAILU_VERSION}
      environment:
        - DOMAIN=${MAILU_DOMAIN}
        - HOSTNAMES=${MAILU_HOSTNAMES}
        - POSTMASTER=${MAILU_POSTMASTER}
        - SECRET_KEY=${MAILU_SECRET_KEY}
        - AUTH_RATELIMIT=${MAILU_AUTH_RATELIMIT}
        - TLS_FLAVOR=${MAILU_TLS_FLAVOR}
        - DISABLE_STATISTICS=${MAILU_DISABLE_STATISTICS}
        - DMARC_RUA=${MAILU_DMARC_RUA}
        - DMARC_RUF=${MAILU_DMARC_RUF}
        - WELCOME=${MAILU_WELCOME}
        - WELCOME_SUBJECT=${MAILU_WELCOME_SUBJECT}
        - WELCOME_BODY=${MAILU_WELCOME_BODY}
        - WEB_ADMIN=${MAILU_WEB_ADMIN}
        - WEB_WEBMAIL=${MAILU_WEB_WEBMAIL}
        - WEBSITE=${MAILU_WEBSITE}
        - WEBMAIL=${MAILU_WEBMAIL}
        - SITENAME=${MAILU_SITENAME}
        - PASSWORD_SCHEME=${MAILU_PASSWORD_SCHEME}
        - RECAPTCHA_PUBLIC_KEY=${MAILU_RECAPTCHA_PUBLIC_KEY}
        - RECAPTCHA_PRIVATE_KEY=${MAILU_RECAPTCHA_PRIVATE_KEY}
      volumes:
        - "${DATA_PATH_HOST}/mailu/data:/data"
        - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
        - /var/run/docker.sock:/var/run/docker.sock:ro
      depends_on:
        - redis
      networks:
        backend:
          aliases:
            - admin
    mailu-webmail:
      image: "mailu/${MAILU_WEBMAIL}:${MAILU_VERSION}"
      volumes:
        - "${DATA_PATH_HOST}/mailu/webmail:/data"
      networks:
        backend:
          aliases:
            - webmail
    mailu-fetchmail:
      image: mailu/fetchmail:${MAILU_VERSION}
      environment:
        - FETCHMAIL_DELAY=${MAILU_FETCHMAIL_DELAY}
      volumes:
        - "${DATA_PATH_HOST}/mailu/data:/data"
      networks:
        backend:
          aliases:
            - fetchmail

### SWAGGER EDITOR ############################################
    swagger-editor:
      build: ./swagger-editor
      ports:
        - ${SWAGGER_EDITOR_PORT}:8080
      networks:
        - backend

### SWAGGER UI ################################################
    swagger-ui:
      build: ./swagger-ui
      environment:
        - API_URL=${SWAGGER_API_URL}
      ports:
        - ${SWAGGER_UI_PORT}:8080
      networks:
        - backend


### react #####################################################
    react:
      build:
        context: ./react
      ports:
        - "3000:3000"
      container_name: react
      stdin_open: true
      environment:
        - CHOKIDAR_USEPOLLING=true
      networks:
          - frontend
          - backend
      volumes:
        - ./react:/usr/src/app/react
        - /usr/src/app/react/node_modules

 
  ### keycloak ##################################################
    keycloak:
      image: bitnami/keycloak:${KEYCLOAK_VERSION}
      ports:
        - "${KEYCLOAK_HTTP_PORT}:${KEYCLOAK_HTTP_PORT}"
      environment:
        - KEYCLOAK_HTTP_PORT=${KEYCLOAK_HTTP_PORT}
        - KEYCLOAK_CREATE_ADMIN_USER=${KEYCLOAK_CREATE_ADMIN_USER}
        - KEYCLOAK_ADMIN_USER=${KEYCLOAK_ADMIN_USER}
        - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
        - KEYCLOAK_DATABASE_HOST=${KEYCLOAK_POSTGRES_HOST}
        - KEYCLOAK_DATABASE_PORT=${POSTGRES_PORT}
        - KEYCLOAK_DATABASE_NAME=${KEYCLOAK_POSTGRES_DB}
        - KEYCLOAK_DATABASE_USER=${KEYCLOAK_POSTGRES_USER}
        - KEYCLOAK_DATABASE_PASSWORD=${KEYCLOAK_POSTGRES_PASSWORD}
      depends_on:
        - postgres
      networks:
        - frontend
        - backend
